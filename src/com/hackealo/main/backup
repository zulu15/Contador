package com.hackealo.main;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.Iterator;

public class Contador {

	// Tendra asociada la letra junto a su total de repeticiones
	private static HashMap<String, Integer> mapa = null;
	private static ArrayList<Integer> numeros = new ArrayList<Integer>();
	private static ArrayList<String> letrasOrdenadas = new ArrayList<String>();

	/*
	 * 
	 * Ordenar de mayor a menor según cantidad de apariciones las siguientes
	 * letras del alfabeto. Si empatan, ordenar alfabéticamente. Dar la
	 * respuesta en minúscula.
	 * kvUSJiexUMdwUSZTXnanTQIHpzYLMZAfTQmkCMGJfWvbaRPmTgzutBuILwahTgzvYVaOmoFQctTcrKUzrvUnlcWoaFCHyEutBJmeYUmgCRxQKhpeiXQrshQnjDgdCOtUdCqLuhBvlwbQWoQNNOtzknOdoCOVqdMqNHUlrUGNetqhtKtqkiUWZNcwtJddEQamoIVrRM
	 */

	public static void main(String[] args) {

		// final String cadena =
		// "OkvUSJiexUMdwUSZTXnanTQIHpzYLMZAfTQmkCMGJfWvbaRPmTgzutBuILwahTgzvYVaOmoFQctTcrKUzrvUnlcWoaFCHyEutBJmeYUmgCRxQKhpeiXQrshQnjDgdCOtUdCqLuhBvlwbQWoQNNOtzknOdoCOVqdMqNHUlrUGNetqhtKtqkiUWZNcwtJddEQamoIVrRM";
		final String cadena = "ABCA";
		char[] charCadena = cadena.toCharArray();
		coincidencias(charCadena);
		for (int i = 0; i < numeros.size(); i++) {
			System.out.println(i+") "+numeros.get(i));
		}

	}


	/**
	 * Este metodo guarda en un objeto map cada uno de los caracteres con el
	 * total de veces que aparece
	 * 
	 * @param charCadena
	 *            caracteres a contar
	 */
	private static void coincidencias(char charCadena[]) {
		int contador = 0;
		mapa = new HashMap<String, Integer>();
		for (int i = 0; i < charCadena.length; i++) {
			System.out.println("Elemento (" + i + ") => " + charCadena[i]);
			for (int j = 0; j < charCadena.length; j++) {
				System.out.println("Comparando elemento " + charCadena[i] + " con " + charCadena[j]);
				if (charCadena[i] == charCadena[j]) {
					System.out.println("Encontramos una inicidencia => " + charCadena[j]);
					contador++; // Vamos iterando el numero de veces que
								// encontramos coincidencias
				}
				if (isUltimoElemento(j, charCadena)) { // Si es el ultimo
					if (!isKeyAsociada(charCadena[i])) { //Si no tiene un elemento asociado
						System.out.println("Agrego al mapa ("+charCadena[i]+ "-"+contador+")");
						mapa.put(String.valueOf(charCadena[i]), contador); 										
						agregarNumeroLista(contador);
						contador = 0; // Reseteo el contador
						
					}else{
						System.out.println("Ya tiene una key asociada");
					}
		

				}
			}
		}
	}

	private static void agregarNumeroLista(int contador) {
		numeros.add(contador);
		
	}

	/**
	 * @param index
	 *            el numero a comparar
	 * @param array
	 *            el array de caracteres
	 * @return Si la posicion del elemento que le pasamos es igual al limite del
	 *         array devolvemos verdadero
	 */
	private static boolean isUltimoElemento(int index, char[] array) {
		return ((array.length - 1) == index) ? true : false;
	}

	private static boolean isKeyAsociada(char c) {
		System.out.println("El valor "+c +" mapa =>"+mapa.get(String.valueOf(c)));
		return (mapa.get(String.valueOf(c)) != null) ? true : false;
	}
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	/*****
	 *  METODOS QUE NO SI ME VAN A SERVIR LOS MANDO ABAJO PARA QUE NO ME ROMPAN LA VERGA
	 */
	private static void ordenarLetras(char[] charCadena) {
		for (int i = 0; i < charCadena.length; i++) {
			for (int j = 0; j < charCadena.length; j++) {
				int numero = mapa.get(String.valueOf(charCadena[j]));
				if (numero == numeros.get(i)) {
					letrasOrdenadas.add(String.valueOf(charCadena[j]));

				}
			}
		}

	}

	private static void ordenarTotales(ArrayList<Integer> numeros) {
		for (int i = 0; i < numeros.size(); i++) {
			for (int j = 0; j < numeros.size() - 1; j++) {
				if (numeros.get(j + 1) > numeros.get(j)) {
					int mayor = numeros.get(j + 1);
					int menor = numeros.get(j);
					numeros.set(j, mayor);
					numeros.set(j + 1, menor);
				}

			}
		}

	}
}
